// Code generated by ast_codegen.go; DO NOT EDIT.

package main

import "errors"

// define the base Expr (5.2.2 Metaprogramming the trees)
type Expr interface {
	// define the abstract accept() function (5.3.3 Visitors for expressions)
	Accept(visitor ExprVisitor) (result interface{}, err error)
}

// define the visitor interface (5.3.3 Visitors for expressions)
type ExprVisitor interface {
	VisitBinaryExpr(v *BinaryExpr) (result interface{}, err error)

	VisitUnaryExpr(v *UnaryExpr) (result interface{}, err error)

	VisitGroupingExpr(v *GroupingExpr) (result interface{}, err error)

	VisitLiteralExpr(v *LiteralExpr) (result interface{}, err error)

	VisitVariableExpr(v *VariableExpr) (result interface{}, err error)

	VisitAssignExpr(v *AssignExpr) (result interface{}, err error)
}

type StubExprVisitor struct{}

// type assertion to ensure stub implements all
var _ ExprVisitor = StubExprVisitor{}

func (s StubExprVisitor) VisitBinaryExpr(_ *BinaryExpr) (result interface{}, err error) {
	return nil, errors.New("visit func for BinaryExpr is not implemented")
}

func (s StubExprVisitor) VisitUnaryExpr(_ *UnaryExpr) (result interface{}, err error) {
	return nil, errors.New("visit func for UnaryExpr is not implemented")
}

func (s StubExprVisitor) VisitGroupingExpr(_ *GroupingExpr) (result interface{}, err error) {
	return nil, errors.New("visit func for GroupingExpr is not implemented")
}

func (s StubExprVisitor) VisitLiteralExpr(_ *LiteralExpr) (result interface{}, err error) {
	return nil, errors.New("visit func for LiteralExpr is not implemented")
}

func (s StubExprVisitor) VisitVariableExpr(_ *VariableExpr) (result interface{}, err error) {
	return nil, errors.New("visit func for VariableExpr is not implemented")
}

func (s StubExprVisitor) VisitAssignExpr(_ *AssignExpr) (result interface{}, err error) {
	return nil, errors.New("visit func for AssignExpr is not implemented")
}

// define the subtype Binary (5.2.2 Metaprogramming the trees)
type BinaryExpr struct {
	left Expr

	operator Token

	right Expr
}

// each subtype implements the abstract accept() and calls the right visit method (5.3.3 Visitors for expressions)
func (b *BinaryExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitBinaryExpr(b)
}

var _ Expr = (*BinaryExpr)(nil)

// define the subtype Unary (5.2.2 Metaprogramming the trees)
type UnaryExpr struct {
	operator Token

	right Expr
}

// each subtype implements the abstract accept() and calls the right visit method (5.3.3 Visitors for expressions)
func (b *UnaryExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitUnaryExpr(b)
}

var _ Expr = (*UnaryExpr)(nil)

// define the subtype Grouping (5.2.2 Metaprogramming the trees)
type GroupingExpr struct {
	expr Expr
}

// each subtype implements the abstract accept() and calls the right visit method (5.3.3 Visitors for expressions)
func (b *GroupingExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitGroupingExpr(b)
}

var _ Expr = (*GroupingExpr)(nil)

// define the subtype Literal (5.2.2 Metaprogramming the trees)
type LiteralExpr struct {
	value interface{}
}

// each subtype implements the abstract accept() and calls the right visit method (5.3.3 Visitors for expressions)
func (b *LiteralExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitLiteralExpr(b)
}

var _ Expr = (*LiteralExpr)(nil)

// define the subtype Variable (5.2.2 Metaprogramming the trees)
type VariableExpr struct {
	variableName Token
}

// each subtype implements the abstract accept() and calls the right visit method (5.3.3 Visitors for expressions)
func (b *VariableExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitVariableExpr(b)
}

var _ Expr = (*VariableExpr)(nil)

// define the subtype Assign (5.2.2 Metaprogramming the trees)
type AssignExpr struct {
	variableName Token

	assignValue Expr
}

// each subtype implements the abstract accept() and calls the right visit method (5.3.3 Visitors for expressions)
func (b *AssignExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitAssignExpr(b)
}

var _ Expr = (*AssignExpr)(nil)

// define the base Stmt (5.2.2 Metaprogramming the trees)
type Stmt interface {
	// define the abstract accept() function (5.3.3 Visitors for expressions)
	Accept(visitor StmtVisitor) (result interface{}, err error)
}

// define the visitor interface (5.3.3 Visitors for expressions)
type StmtVisitor interface {
	VisitExpressionStmt(v *ExpressionStmt) (result interface{}, err error)

	VisitPrintStmt(v *PrintStmt) (result interface{}, err error)

	VisitVarStmt(v *VarStmt) (result interface{}, err error)

	VisitBlockStmt(v *BlockStmt) (result interface{}, err error)

	VisitIfStmt(v *IfStmt) (result interface{}, err error)
}

type StubStmtVisitor struct{}

// type assertion to ensure stub implements all
var _ StmtVisitor = StubStmtVisitor{}

func (s StubStmtVisitor) VisitExpressionStmt(_ *ExpressionStmt) (result interface{}, err error) {
	return nil, errors.New("visit func for ExpressionStmt is not implemented")
}

func (s StubStmtVisitor) VisitPrintStmt(_ *PrintStmt) (result interface{}, err error) {
	return nil, errors.New("visit func for PrintStmt is not implemented")
}

func (s StubStmtVisitor) VisitVarStmt(_ *VarStmt) (result interface{}, err error) {
	return nil, errors.New("visit func for VarStmt is not implemented")
}

func (s StubStmtVisitor) VisitBlockStmt(_ *BlockStmt) (result interface{}, err error) {
	return nil, errors.New("visit func for BlockStmt is not implemented")
}

func (s StubStmtVisitor) VisitIfStmt(_ *IfStmt) (result interface{}, err error) {
	return nil, errors.New("visit func for IfStmt is not implemented")
}

// define the subtype Expression (5.2.2 Metaprogramming the trees)
type ExpressionStmt struct {
	expression Expr
}

// each subtype implements the abstract accept() and calls the right visit method (5.3.3 Visitors for expressions)
func (b *ExpressionStmt) Accept(visitor StmtVisitor) (result interface{}, err error) {
	return visitor.VisitExpressionStmt(b)
}

var _ Stmt = (*ExpressionStmt)(nil)

// define the subtype Print (5.2.2 Metaprogramming the trees)
type PrintStmt struct {
	expression Expr
}

// each subtype implements the abstract accept() and calls the right visit method (5.3.3 Visitors for expressions)
func (b *PrintStmt) Accept(visitor StmtVisitor) (result interface{}, err error) {
	return visitor.VisitPrintStmt(b)
}

var _ Stmt = (*PrintStmt)(nil)

// define the subtype Var (5.2.2 Metaprogramming the trees)
type VarStmt struct {
	varName Token

	initializerExpression Expr
}

// each subtype implements the abstract accept() and calls the right visit method (5.3.3 Visitors for expressions)
func (b *VarStmt) Accept(visitor StmtVisitor) (result interface{}, err error) {
	return visitor.VisitVarStmt(b)
}

var _ Stmt = (*VarStmt)(nil)

// define the subtype Block (5.2.2 Metaprogramming the trees)
type BlockStmt struct {
	statements []Stmt
}

// each subtype implements the abstract accept() and calls the right visit method (5.3.3 Visitors for expressions)
func (b *BlockStmt) Accept(visitor StmtVisitor) (result interface{}, err error) {
	return visitor.VisitBlockStmt(b)
}

var _ Stmt = (*BlockStmt)(nil)

// define the subtype If (5.2.2 Metaprogramming the trees)
type IfStmt struct {
	condition Expr

	thenBranch Stmt

	elseBranch Stmt
}

// each subtype implements the abstract accept() and calls the right visit method (5.3.3 Visitors for expressions)
func (b *IfStmt) Accept(visitor StmtVisitor) (result interface{}, err error) {
	return visitor.VisitIfStmt(b)
}

var _ Stmt = (*IfStmt)(nil)
